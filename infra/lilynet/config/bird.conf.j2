################################################
#               Variable header                #
################################################

define CLEARNET_OWNAS = 401736;
define CLEARNET_OWNNET = 23.142.212.0/24;
define CLEARNET_OWNNETSET = [23.142.212.0/24+];
define CLEARNET_OWNNETv6 = 2620:d7:6000::/44;
define CLEARNET_OWNNETSETv6 = [2620:d7:6000::/44+];

define DN42_OWNAS = 4242421919;
define DN42_OWNNET = 172.21.89.64/27;
define DN42_OWNNETSET = [172.21.89.64/27+];
define DN42_OWNNETv6 = fd11:4514:1919::/48;
define DN42_OWNNETSETv6 = [fd11:4514:1919::/48+];

################################################
#                 Header end                   #
################################################

# Utility functions

function is_dn42_self_net() {
  return net ~ DN42_OWNNETSET;
}

function is_dn42_self_net_v6() {
  return net ~ DN42_OWNNETSETv6;
}

function is_clearnet_self_net() {
  return net ~ CLEARNET_OWNNETSET;
}

function is_clearnet_self_net_v6() {
  return net ~ CLEARNET_OWNNETSETv6;
}

function is_dn42_network() {
  return net ~ [
    172.20.0.0/14{21,29}, # dn42
    172.20.0.0/24{28,32}, # dn42 Anycast
    172.21.0.0/24{28,32}, # dn42 Anycast
    172.22.0.0/24{28,32}, # dn42 Anycast
    172.23.0.0/24{28,32}, # dn42 Anycast
    172.31.0.0/16+,       # ChaosVPN
    10.100.0.0/14+,       # ChaosVPN
    10.127.0.0/16+,       # neonetwork
    10.0.0.0/8{15,24}     # Freifunk.net
  ];
}

function is_dn42_network_v6() {
  return net ~ [
    fd00::/8{44,64} # ULA address space as per RFC 4193
  ];
}

router id {{ local.dn42.host.ipv4 }};

protocol device {
  scan time 10;
}

protocol kernel export_v4 {
  scan time 20;
  kernel table 64;

  ipv4 {
    import none;
    export filter {
      if source = RTS_STATIC then reject;
      if is_dn42_network() then krt_prefsrc = {{ local.dn42.host.ipv4 }};
      accept;
    };
  };
}

protocol kernel export_v6 {
  scan time 20;
  kernel table 64;

  ipv6 {
    import none;
    export filter {
      if source = RTS_STATIC then reject;
      if is_dn42_network_v6() then krt_prefsrc = {{ local.dn42.host.ipv6 }};
      accept;
    };
  };
}

protocol static import_v4 {
  {% for net in local.dn42.ipv4_prefixes %}
  route {{ net }} unreachable;
  {% endfor %}
  {% for net in local.clearnet.ipv4_prefixes %}
  route {{ net }} unreachable;
  {% endfor %}
  ipv4 {
    import all;
    export none;
  };
}

protocol static import_v6 {
  {% for net in local.dn42.ipv6_prefixes %}
  route {{ net }} unreachable;
  {% endfor %}
  {% for net in local.clearnet.ipv6_prefixes %}
  route {{ net }} unreachable;
  {% endfor %}
  ipv6 {
    import all;
    export none;
  };
}

roa4 table dn42_roa;
roa6 table dn42_roa_v6;

protocol static dn42_rpki_v4 {
  roa4 { table dn42_roa; };
  include "/etc/bird/roa_dn42.conf";
}

protocol static dn42_rpki_v6 {
  roa6 { table dn42_roa_v6; };
  include "/etc/bird/roa_dn42_v6.conf";
}

protocol bgp clearnet_upstream_vultr_v4 {
  local as CLEARNET_OWNAS;
  neighbor 169.254.169.254 as 64515;
  multihop;
  password "{{ global_secrets.vultr_bgp_password }}";

  ipv4 {
    import none;
    export filter {
      if !is_clearnet_self_net() then reject;
      accept;
    };
  };
}

protocol bgp clearnet_upstream_vultr_v6 {
  local as CLEARNET_OWNAS;
  neighbor 2001:19f0:ffff::1 as 64515;
  multihop;
  password "{{ global_secrets.vultr_bgp_password }}";

  ipv6 {
    import none;
    export filter {
      if !is_clearnet_self_net_v6() then reject;
      accept;
    };
  };
}

template bgp dnpeers {
  local as DN42_OWNAS;
  path metric 1;

  ipv4 {
    extended next hop;

    import filter {
      if !is_dn42_network() || is_dn42_self_net() then reject;
      if (roa_check(dn42_roa, net, bgp_path.last) != ROA_VALID) then {
        # Reject when unknown or invalid according to ROA
        print "[dn42] ROA check failed for ", net, " ASN ", bgp_path.last;
        reject;
      }
      accept;
    };

    export filter {
      if !is_dn42_network() then reject;
      else accept;
    };

    import limit 9000 action block;
  };

  ipv6 {
    import filter {
      if !is_dn42_network_v6() || is_dn42_self_net_v6() then reject;
      if (roa_check(dn42_roa_v6, net, bgp_path.last) != ROA_VALID) then {
        # Reject when unknown or invalid according to ROA
        print "[dn42] ROA check failed for ", net, " ASN ", bgp_path.last;
        reject;
      }
      accept;
    };

    export filter {
      if !is_dn42_network_v6() then reject;
      accept;
    };

    import limit 9000 action block;
  };
}

template bgp internal {
  local as DN42_OWNAS;
  path metric 1;

  ipv4 {
    extended next hop;
    import all;
    export all;
  };

  ipv6 {
    import all;
    export all;
  };
}

{% for peer in local.dn42_peers %}
protocol bgp dn42_{{ peer.asn }} from dnpeers {
  neighbor {{ peer.wg.peer.ipv6 }} as {{ peer.asn }};
  interface "wgd{{ peer.asn }}";
}

{% if peer.wg.peer.ipv4 and not peer.multiprotocol %}
protocol bgp dn42_{{ peer.asn }}_ipv4 from dnpeers {
  neighbor {{ peer.wg.peer.ipv4 }} as {{ peer.asn }};
}
{% endif %}
{% endfor %}

{% for node in network %}
protocol bgp net_{{ node.name }} from internal {
  neighbor {{ node.wg.peer_ll_ipv6 }} as DN42_OWNAS;
  direct;
  interface "wgn{{ node.name }}";
}
{% endfor %}
